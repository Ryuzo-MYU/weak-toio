@startuml
title weak-toio 設計
skinparam Linetype ortho

' オブジェクト
class RealSensor{
	+ センサー情報を送信
}
class M5Stick{
	+ GetSensorInfo() : SensorInfo
	- Update() : void
}
class DummySensor{
	+ GetSensorInfo() : SensorInfo
	- Update() : void
}
struct SensorInfo{}

interface ISensorUnit{
	+ GetSensorInfo() : SensorInfo
	- Update() : void
}
class Evaluate{
	+ GetEvaluationResult(SensorUnit) : Result
}
struct Result{
	int score
}

interface IEvaluationResultSender{
	+ GetEvaluationResult(SensorUnit) : Result
}
class ActionGenerator{
	+ GenerateAction(Result) : Action
	- CautionAction() : Action
	- DangerAction() : Action
}
class Action{
	Queue<Motion> motions
	+ Action()
	+ GetNextMotion() : Motion
	+ Count() : int
}
class Motion{
	+ delegate operation{get; private set;}
	+ float interval{get; private set;}
	+ Motion(delegate, float)
}

interface IActionSender{
	+ GenerateAction(Result) : Action
}
class Toio{
	- int id
	- Cube cube
	- CubeHandler handle
	- Queue<Action> actions
	- Action currentAction
	+ StartMove() : IEnumerator
}
interface IToioActionGenerator{
	+ GetTranslateAction(Toio) : delegate
	+ GetRotateAction(Toio) : delegate
	+ GetSoundAction(Toio) : delegate
	+ GetLEDAction(Toio) : delegate
}
package toioSdk{
	class CubeManager
	class CubeHandler{
		+ TranslateByDist()
		+ RotateByDeg()
		+ RotateByRad()
	}
}
interface IToioActor{
	+ StartMove() : void
}

' 関係
ISensorUnit <-- M5Stick : 実装
M5Stick --> RealSensor : 利用
ISensorUnit <-- DummySensor : 実装

ISensorUnit <-- Evaluate : 利用
Evaluate o-- SensorInfo : データフォーマットを定義
ISensorUnit --> SensorInfo
Evaluate <-- Result : 生成

Evaluate --|> IEvaluationResultSender : 実装
IEvaluationResultSender <-- ActionGenerator : 利用
ActionGenerator <-- Action : 生成
Action o-- Motion : 所持
Toio o-left- Action : 所持
IToioActionGenerator <-right- ActionGenerator : 利用

ActionGenerator -|> IActionSender
IActionSender <-- Toio : 利用
Toio --> CubeHandler : 所持
CubeHandler -> CubeManager : 所持
Toio -right--|> IToioActor : 実装
IToioActor <-- Main : 使用

@enduml