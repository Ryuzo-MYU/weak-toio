@startuml
' パッケージ（名前空間）の定義
package PC{
	package "Action発行" {
		class ActionGenerator {
			+ Update(Result result): void
			- GenerateAction(Result result)
		}
		note right of ActionGenerator : 対象の環境およびそのスコアに\n応じてアクションを生成

		class Action {
			Movement[] movements
			EnvType type
		}
		note right of Action: Movementの配列とMovementに\n渡す引数を保持

		class ActionOperator{
			List<Movement[]> actionQueue
			+ DoAction(actionQueue): void
		}


	}

	package "評価" {
		class Evaluate {
			- SensorUnit sensor
			+ Update(SensorUnit)
			+ Evaluate(SensorUnit): Result
		}
		note right of Evaluate: SensorUnitから環境データをもらい、\n評価スコア(int)を返す

		class Result {
			+ int score
			+ EnvType type
		}
		note right of Result: 評価スコアおよび、対象としている環境のタイプを保持
	}

	enum EnvType {
		Translate
		RotateByDeg
		RotateByRad
	}
}

package "エージェント" {
	class toio
	note right of toio: Movementに従って\n動いたり音を鳴らす

	class SensorUnit{
		SensorInfo sensorInfo
	}
	note right of SensorUnit: 環境データを取得。\nシリアル通信で送る

	struct SensorInfo{
		string deviceName
		vector3 acceleration
		vector3 gyro
		float temp
		float humidity
		float pressure
		float vbat
	}

}

' 関係性の定義
toio -- SensorUnit: toioにSensorUnitを搭載
SensorUnit -- SensorInfo
SensorUnit <-- Evaluate: 環境データを取得
Evaluate -- Result: 評価結果を生成
EnvType <-up- Evaluate: 環境タイプ参照
Result <-- ActionGenerator: 評価結果を取得
ActionGenerator -- Action: アクション命令を生成
Action <-- ActionOperator: アクション命令を逐次実行
ActionOperator <-- toio: アクションを実行

@enduml
